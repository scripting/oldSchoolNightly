<?xml version="1.0" encoding="ISO-8859-1"?>
<opml version="2.0">
	<head>
		<title>oldschoolnightly.js</title>
		<dateModified>&lt;%dateModified%></dateModified>
		<expansionState></expansionState>
		<vertScrollState>1</vertScrollState>
		<windowTop>300</windowTop>
		<windowLeft>700</windowLeft>
		<windowBottom>900</windowBottom>
		<windowRight>1500</windowRight>
		</head>
	<body text="oldschoolnightly.js">
		<outline text="const myProductName = &quot;Old School Nightly&quot;, myVersion = &quot;0.4.7&quot;;"></outline>
		<outline text=""></outline>
		<outline text="const utils = require (&quot;daveutils&quot;);"></outline>
		<outline text="const request = require (&quot;request&quot;);"></outline>
		<outline text="const fs = require (&quot;fs&quot;);"></outline>
		<outline text=""></outline>
		<outline text="var config = {">
			<outline text="username: &quot;scripting&quot;,"></outline>
			<outline text="repo: &quot;Scripting-News&quot;,"></outline>
			<outline isComment="true" text="repo: &quot;test1&quot;,"></outline>
			<outline text="basefolder: &quot;data/&quot;,"></outline>
			<outline text="basepath: &quot;blog/&quot;,"></outline>
			<outline text="type: &quot;text/html&quot;,"></outline>
			<outline text="urlRssFile: &quot;http://scripting.com/rss.xml&quot;,"></outline>
			<outline text="pathRssFile: &quot;rss.xml&quot;,"></outline>
			<outline text="committer: {">
				<outline text="name: &quot;Dave Winer&quot;,"></outline>
				<outline text="email: &quot;dave.winer@gmail.com&quot;"></outline>
				<outline text="},"></outline>
				</outline>
			<outline text="message: &quot;Nightly update&quot;,"></outline>
			<outline text="userAgent: &quot;Dave's OldSchool GitHub Uploader&quot;"></outline>
			<outline text="};"></outline>
			</outline>
		<outline text="var stats = {">
			<outline text="whenLastUpdate: new Date (0)"></outline>
			<outline text="};"></outline>
			</outline>
		<outline text="const fnameStats = &quot;stats.json&quot;, fnameConfig = &quot;config.json&quot;;"></outline>
		<outline text=""></outline>
		<outline text="function getGitHubFile (repoPath, callback) {">
			<outline text="var url = &quot;https://&quot; + config.username + &quot;:&quot; + config.password + &quot;@api.github.com/repos/&quot; + config.username + &quot;/&quot; + config.repo + &quot;/contents/&quot; + repoPath;"></outline>
			<outline text="var theRequest = {">
				<outline text="method: &quot;GET&quot;,"></outline>
				<outline text="url: url,"></outline>
				<outline text="headers: {">
					<outline text="&quot;User-Agent&quot;: config.userAgent"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="};"></outline>
				</outline>
			<outline text="request (theRequest, function (err, response, body) { ">
				<outline text="var jstruct = undefined;"></outline>
				<outline text="if (err) {">
					<outline text="console.log (&quot;getGitHubFile: err.message == &quot; + err.message);"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="else {">
					<outline isComment="true" text="console.log (&quot;getGitHubFile: response.statusCode == &quot; + response.statusCode);"></outline>
					<outline text="try {">
						<outline text="jstruct = JSON.parse (body);"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="catch (err) {">
						<outline text="console.log (&quot;getGitHubFile: err.message == &quot; + err.message);"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="}"></outline>
					</outline>
				<outline text="if (callback !== undefined) {">
					<outline text="callback (jstruct);"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="});"></outline>
				</outline>
			<outline text="}"></outline>
			</outline>
		<outline text="function getDirectory (folder, callback) {">
			<outline text="if (!utils.endsWith (folder, &quot;/&quot;)) {">
				<outline text="folder += &quot;/&quot;;"></outline>
				<outline text="}"></outline>
				</outline>
			<outline text="utils.sureFilePath (folder, function () {">
				<outline text="fs.readdir (folder, function (err, list) {">
					<outline text="if (err) {">
						<outline text="console.log (&quot;visitDirectory: err.message == &quot; + err.message);"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="else {">
						<outline text="if (list !== undefined) { ">
							<outline text="callback (list);"></outline>
							<outline text="}"></outline>
							</outline>
						<outline text="}"></outline>
						</outline>
					<outline text="});"></outline>
					</outline>
				<outline text="});"></outline>
				</outline>
			<outline text="}"></outline>
			</outline>
		<outline text=""></outline>
		<outline text=""></outline>
		<outline text="function uploadOneObject (data, repoPath, callback) {">
			<outline text="var bodyStruct = { ">
				<outline text="message: config.message,"></outline>
				<outline text="committer: {">
					<outline text="name: config.committer.name,"></outline>
					<outline text="email: config.committer.email"></outline>
					<outline text="},"></outline>
					</outline>
				<outline text="content: new Buffer (data).toString ('base64')"></outline>
				<outline text="};"></outline>
				</outline>
			<outline text="getGitHubFile (repoPath, function (jstruct) {">
				<outline text="if (jstruct !== undefined) {">
					<outline text="bodyStruct.sha = jstruct.sha;"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="var username = config.username;"></outline>
				<outline text="var url = &quot;https://&quot; + username + &quot;:&quot; + config.password + &quot;@api.github.com/repos/&quot; + username + &quot;/&quot; + config.repo + &quot;/contents/&quot; + repoPath;"></outline>
				<outline text="var theRequest = {">
					<outline text="method: &quot;PUT&quot;,"></outline>
					<outline text="url: url,"></outline>
					<outline text="body: JSON.stringify (bodyStruct),"></outline>
					<outline text="headers: {">
						<outline text="&quot;User-Agent&quot;: config.userAgent,"></outline>
						<outline text="&quot;Content-Type&quot;: config.type"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="};"></outline>
					</outline>
				<outline text="request (theRequest, function (err, response, body) { ">
					<outline text="if (err) {">
						<outline text="console.log (&quot;uploadOneFile: f == &quot; + f + &quot;, err.message == &quot; + err.message);"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="else {">
						<outline text="console.log (&quot;uploadOneObject: response.statusCode == &quot; + response.statusCode);"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="if (callback !== undefined) {">
						<outline text="callback ();"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="});"></outline>
					</outline>
				<outline text="});"></outline>
				</outline>
			<outline text="}"></outline>
			</outline>
		<outline text="function uploadOneFile (f, repoPath, callback) {">
			<outline text="fs.readFile (f, function (err, data) {">
				<outline text="if (err) {">
					<outline text="console.log (&quot;uploadOneFile: f == &quot; + f + &quot;, err.message == &quot; + err.message);"></outline>
					<outline text="if (callback !== undefined) {">
						<outline text="callback ();"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="}"></outline>
					</outline>
				<outline text="else {">
					<outline text="uploadOneObject (data, repoPath, callback);"></outline>
					<outline isComment="true" text=""></outline>
					<outline isComment="true" text="console.log (&quot;uploadOneFile: f == &quot; + f + &quot;, contains &quot; + data.length + &quot; chars.&quot;);"></outline>
					<outline isComment="true" text="var bodyStruct = { ">
						<outline text="message: config.message,"></outline>
						<outline text="committer: {">
							<outline text="name: config.committer.name,"></outline>
							<outline text="email: config.committer.email"></outline>
							<outline text="},"></outline>
							</outline>
						<outline text="content: new Buffer (data).toString ('base64')"></outline>
						<outline text="};"></outline>
						</outline>
					<outline isComment="true" text="getGitHubFile (repoPath, function (jstruct) {">
						<outline text="if (jstruct !== undefined) {">
							<outline text="bodyStruct.sha = jstruct.sha;"></outline>
							<outline text="}"></outline>
							</outline>
						<outline text="var username = config.username;"></outline>
						<outline text="var url = &quot;https://&quot; + username + &quot;:&quot; + config.password + &quot;@api.github.com/repos/&quot; + username + &quot;/&quot; + config.repo + &quot;/contents/&quot; + repoPath;"></outline>
						<outline text="var theRequest = {">
							<outline text="method: &quot;PUT&quot;,"></outline>
							<outline text="url: url,"></outline>
							<outline text="body: JSON.stringify (bodyStruct),"></outline>
							<outline text="headers: {">
								<outline text="&quot;User-Agent&quot;: config.userAgent,"></outline>
								<outline text="&quot;Content-Type&quot;: config.type"></outline>
								<outline text="}"></outline>
								</outline>
							<outline text="};"></outline>
							</outline>
						<outline text="request (theRequest, function (err, response, body) { ">
							<outline text="if (err) {">
								<outline text="console.log (&quot;uploadOneFile: f == &quot; + f + &quot;, err.message == &quot; + err.message);"></outline>
								<outline text="}"></outline>
								</outline>
							<outline text="else {">
								<outline text="console.log (&quot;uploadOneFile: f == &quot; + f + &quot;, response.statusCode == &quot; + response.statusCode);"></outline>
								<outline text="}"></outline>
								</outline>
							<outline text="if (callback !== undefined) {">
								<outline text="callback ();"></outline>
								<outline text="}"></outline>
								</outline>
							<outline text="});"></outline>
							</outline>
						<outline text="});"></outline>
						</outline>
					<outline text="}"></outline>
					</outline>
				<outline text="});"></outline>
				</outline>
			<outline text="}"></outline>
			</outline>
		<outline text="function uploadHttpFile (url, repoPath, callback) {">
			<outline text="var theRequest = {">
				<outline text="method: &quot;GET&quot;,"></outline>
				<outline text="url: url,"></outline>
				<outline text="headers: {">
					<outline text="&quot;User-Agent&quot;: config.userAgent"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="};"></outline>
				</outline>
			<outline text="request (theRequest, function (err, response, body) { ">
				<outline text="if (err) {">
					<outline text="console.log (&quot;uploadHttpFile: err.message == &quot; + err.message);"></outline>
					<outline text="if (callback !== undefined) {">
						<outline text="callback ();"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="}"></outline>
					</outline>
				<outline text="else {">
					<outline text="uploadOneObject (body, repoPath, callback);"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="});"></outline>
				</outline>
			<outline text="}"></outline>
			</outline>
		<outline text="function uploadTodaysFile (today, foldername, ext, callback) {">
			<outline text="var f = config.basefolder + foldername + &quot;/dave/&quot; + utils.getDatePath (today, false) + ext;"></outline>
			<outline text="var repoPath = config.basepath + foldername + &quot;/&quot; + utils.getDatePath (today, false) + ext;"></outline>
			<outline text="uploadOneFile (f, repoPath, callback);"></outline>
			<outline text="}"></outline>
			</outline>
		<outline text="function doOneFolder (now, foldername, callback) {">
			<outline text="var folder = config.basefolder + foldername + &quot;/dave/&quot; + utils.getDatePath (now, true);"></outline>
			<outline text="getDirectory (folder, function (list) {">
				<outline text="function donextfile (ix) {">
					<outline text="if (ix &lt; list.length) {">
						<outline text="let fname = list [ix];"></outline>
						<outline text="let repoPath = config.basepath + foldername + &quot;/&quot; + utils.getDatePath (now, true) + fname;"></outline>
						<outline isComment="true" text="console.log (&quot;repoPath == &quot; + repoPath);"></outline>
						<outline text="uploadOneFile (folder + fname, repoPath, function () {">
							<outline text="donextfile (ix + 1);"></outline>
							<outline text="});"></outline>
							</outline>
						<outline text="}"></outline>
						</outline>
					<outline text="else {">
						<outline text="if (callback !== undefined) {">
							<outline text="callback ();"></outline>
							<outline text="}"></outline>
							</outline>
						<outline text="}"></outline>
						</outline>
					<outline text="}"></outline>
					</outline>
				<outline text="donextfile (0);"></outline>
				<outline text="});"></outline>
				</outline>
			<outline text="}"></outline>
			</outline>
		<outline text="function doUploads () {">
			<outline text="uploadHttpFile (config.urlRssFile, config.basepath + config.pathRssFile, function () {">
				<outline text="var yesterday = utils.dateYesterday (new Date ());"></outline>
				<outline text="uploadTodaysFile (yesterday, &quot;pages&quot;, &quot;.html&quot;, function () {">
					<outline text="uploadTodaysFile (yesterday, &quot;days&quot;, &quot;.json&quot;, function () {">
						<outline text="doOneFolder (yesterday, &quot;items&quot;);"></outline>
						<outline text="});"></outline>
						</outline>
					<outline text="});"></outline>
					</outline>
				<outline text="});"></outline>
				</outline>
			<outline text="}"></outline>
			</outline>
		<outline text="function checkForUpload () {">
			<outline text="var now = new Date ();"></outline>
			<outline text="if (!utils.sameDay (now, stats.whenLastUpdate)) {">
				<outline text="stats.whenLastUpdate = now;"></outline>
				<outline text="fs.writeFile (fnameStats, utils.jsonStringify (stats), function (err) {">
					<outline text="});"></outline>
					</outline>
				<outline text="console.log (&quot;&quot;);"></outline>
				<outline text="doUploads ();"></outline>
				<outline text="}"></outline>
				</outline>
			<outline text="}"></outline>
			</outline>
		<outline text="function everyMinute () {">
			<outline text="var now = new Date ();"></outline>
			<outline text="console.log (&quot;\n&quot; + myProductName + &quot; v&quot; + myVersion + &quot;: &quot; + now.toLocaleTimeString ());"></outline>
			<outline text="checkForUpload ();"></outline>
			<outline isComment="true" text="if (!utils.sameDay (now, stats.whenLastUpdate)) {">
				<outline text="stats.whenLastUpdate = now;"></outline>
				<outline text="fs.writeFile (fnameStats, utils.jsonStringify (stats), function (err) {">
					<outline text="});"></outline>
					</outline>
				<outline text="doUploads ();"></outline>
				<outline text="}"></outline>
				</outline>
			<outline text="}"></outline>
			</outline>
		<outline text="function runTestCode () {">
			<outline text="doUploads ();"></outline>
			<outline isComment="true" text="console.log (&quot;runTestCode&quot;);"></outline>
			<outline isComment="true" text="uploadHttpFile (config.urlRssFile, config.basepath + config.pathRssFile, function () {">
				<outline text="console.log (&quot;uploadHttpFile returned.&quot;);"></outline>
				<outline text="});"></outline>
				</outline>
			<outline text="}"></outline>
			</outline>
		<outline text=""></outline>
		<outline text="console.log (&quot;\n&quot; + myProductName + &quot; v&quot; + myVersion + &quot;.&quot;);"></outline>
		<outline text="fs.readFile (fnameStats, function (err, data) {">
			<outline text="if (!err) {">
				<outline text="let jstruct = JSON.parse (data);"></outline>
				<outline text="for (x in jstruct) {">
					<outline text="stats [x] = jstruct [x];"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="}"></outline>
				</outline>
			<outline text="fs.readFile (fnameConfig, function (err, data) {">
				<outline text="var jstruct = JSON.parse (data);"></outline>
				<outline text="for (x in jstruct) {">
					<outline text="config [x] = jstruct [x];"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="checkForUpload (); //check immediately at startup"></outline>
				<outline text="runTestCode (); //comment out to deploy for real -- 7/12/18 by DW"></outline>
				<outline text="utils.runAtTopOfMinute (function () {">
					<outline text="setInterval (everyMinute, 60000); "></outline>
					<outline text="everyMinute ();"></outline>
					<outline text="});"></outline>
					</outline>
				<outline text="});"></outline>
				</outline>
			<outline text="});"></outline>
			</outline>
		</body>
	</opml>
